using System.Collections.Generic; 
using System.Text;
using TsBasic.Nodes;

COMPILER RusBas

	public BasicProgram prog ;
	
IGNORECASE

CHARACTERS
	letter ='A' .. 'Z' + 'a'..'z' .
	digit = "0123456789".
	quotation_mark='\"'.
	comment_character= ANY -"\r\n" .
	quoted_string_character =  ANY - quotation_mark.
	sign="+-"	.

	cr  = '\r'.
	nl  = '\n'.
	tab = '\t'.


TOKENS

	ident  =  letter {letter | digit}.
	label_def = letter {letter | digit} ':'.

	integer = digit {digit}.
 // signed_integer  =  digit {digit}.
	
	float_1 =   digit {digit} '.'	 {digit} ['E' [sign] digit {digit} ].
	float_2 =	'.'	 {digit} ['E' [sign] digit {digit} ].
	float_3 =  digit {digit}	'E' [sign] digit {digit}   .

	stringToken = quotation_mark 	{quoted_string_character} quotation_mark.
	eol = nl .
	stringIdent= letter {letter | digit} '$'.

	signToken=sign.

IGNORE cr + tab

PRODUCTIONS

RusBas	 
(.
	prog = new BasicProgram(this);
.)
= 
Line {Line}.


Line
(.
	StatementNode snode=null;
	string label=null;
.)
= [LineNumber<ref label>]
	( 
//  	eol	|
	RemStatement<ref snode>
	|
	[Statement<ref snode>]  eol

	)
(. 
	if (snode!=null)
	{
	var lnode=new LineNode(label,snode);
	prog.AddLine(lnode);
	}
.)

.

LineNumber<ref string label> 
= (integer (. label=t.val; .) )  
| (label_def (. label=t.val.Substring(0,t.val.Length-1) ; .) ) .

Statement<ref StatementNode node>
(. var stoken=t;  .)	
=( 
	
 EndStatement<ref node>
| OptionStatement<ref node>
| ReturnStatement<ref node>	
| IfThenStatement<ref node>	
| ForStatement<ref node>
| NextStatement<ref node>
| RestoreStatement<ref node>
| LetStatement<ref node>
| DataStatement<ref node>
| PrintStatement<ref node>
| ReadStatement<ref node>
| GotoOrSubStatement<ref node> 
| DimStatement<ref node> 
| OnGotoStatement<ref node>
| SimpleStatement<ref node>						   
| DefStatement<ref node>
| InputStatement<ref node>
)
(. 
if (node!=null)
{
	node.Line=stoken.line; 
	node.Col=stoken.col;
} .)
.

EndStatement<ref StatementNode node>
= ("END"|"STOP") (. node = new EndStatementNode(); .) .

PrintStatement<ref StatementNode node> (.var psn=new PrintStatementNode(); node=psn; .)
= "PRINT" {PrintList<psn.items>}
.

PrintList<. List<object> objects .>
(.ExpressionNode node=null;.)
=
 (";"|",") (.objects.Add(t.val); .) {(";"|",") (.objects.Add(t.val); .)} {PrintList<objects>} 
 | PrintItem<ref node> (. objects.Add(node); .)
 .

PrintItem<ref ExpressionNode node>=
 TabCall<ref node>
 | Expression<ref node>.

TabCall<ref ExpressionNode node>
(.
ExpressionNode expr=null;
.)
= "TAB" "(" NumericExpression<ref expr> (.node=new FuncExpressionNode("TAB",expr); .) ")" .

Expression<ref ExpressionNode node> = 
(NumericExpression<ref node> | StringExpression<ref node>).

NumericExpression<ref ExpressionNode node>
(. var list= new List<object>();
	ExpressionNode termNode=null;
.)
= ([signToken (. list.Add(t.val);.)] Term<ref termNode> (.list.Add(termNode); .) 
	 {IF(LaIsSign) signToken (. list.Add(t.val);.) Term<ref termNode> (.list.Add(termNode); .) } )
(. node= list.Count==1 ? list[0] as ExpressionNode : new AddSequenceExpressionNode(list); .)
.

Term<ref ExpressionNode node>
(. var list= new List<object>();
	ExpressionNode eNode=null;
.)
= (Factor<ref eNode> (.list.Add(eNode); .)
	{ ("*"|"/")(. list.Add(t.val);.)  Factor<ref eNode> (.list.Add(eNode); .) })
(. node= list.Count==1 ? list[0] as ExpressionNode : new MulSequenceExpressionNode(list); .)
.

Factor<ref ExpressionNode node>
(. var list= new List<object>();
	 ExpressionNode eNode=null;
.)
= PrimaryExpression<ref eNode> (.list.Add(eNode); .) 
	{("^"|"**")  PrimaryExpression<ref eNode> (.list.Add(eNode); .) }
	(. node= list.Count==1 ? list[0] as ExpressionNode : new PowSequenceExpressionNode(list); .)
.

PrimaryExpression<ref ExpressionNode node>
= 
 "(" NumericExpression<ref node> ")"
| NumericConstant<ref node> 
| NumericReference<ref node>
.

NumericReference<ref ExpressionNode node>
 (.
 string functor=null;
 var list=new List<ExpressionNode>();
 ExpressionNode eNode=null;
 .)
= ( ident (. functor=t.val;.) 
	{ IF( la.val == "(") "(" [Expression<ref eNode> (.list.Add(eNode); .) ] {"," Expression<ref eNode>  (.list.Add(eNode); .) }  ")" } )
	(. node=new ReferenceNode(functor,list); .)
.

Reference<ref ExpressionNode node>
(.
	 
.)
= StringVariable<ref node> | NumericReference<ref node> .

NumericConstantString<ref string s> 
= 
(integer | float_1 | float_2| float_3) 	(.s= t.val; .)
.

NumericConstant<ref ExpressionNode node>
(. string s = null; .)
= NumericConstantString<ref s> (.node= NumericConstantNode.Create(this,s); .)
.
 
StringExpression<ref ExpressionNode node> 
= StringConstant<ref node>
| StringVariable<ref node>.

StringConstant<ref ExpressionNode snode>
= stringToken (.var s=t.val.Substring(1,t.val.Length-2); snode=new StringConstantNode(s);  .) .

RelationalExpression<ref ExpressionNode node> 
(.
	 ExpressionNode lhs=null, rhs=null;
	 string functor=null;
.)
= (Expression<ref lhs> ("="|"<>"  | "<=" | ">=" | "<" | ">" ) (.functor=t.val; .) Expression<ref rhs>)
(. 
	 node=new ReferenceNode(functor,lhs,rhs);
.)
.

Variable<ref ExpressionNode node>
=  (StringVariable<ref node> | NumericVariable<ref node>)  .

StringVariable<ref ExpressionNode node>
= stringIdent 	 (.node=new ReferenceNode(t.val); .) .

NumericVariable<ref ExpressionNode node>
= ident  (.node=new ReferenceNode(t.val); .) .

LetStatement<ref StatementNode node>
(. ExpressionNode vnode=null;
	 ExpressionNode enode=null;
.)
= ["LET"] ( NumericReference<ref vnode> "="  NumericExpression<ref enode> 
| StringVariable<ref vnode> "=" StringExpression<ref enode> )
(.
	 node=new LetStatementNode((ReferenceNode) vnode,enode);
.) .

RemStatement<ref StatementNode node>
(. 
	 var sb=new StringBuilder();
.)
=  "REM" { ANY  (.sb.Append(t.val); sb.Append(' '); .) }  eol (. node=new RemStatementNode(sb.ToString()); .).

JumpLabel<ref string label>
=  (ident|integer) (. label=t.val; .)	.

GotoOrSubStatement<ref StatementNode node>
(. 
	string label=null;
	bool isSub=false;
.)
= ( 
	"GOTO" 
	| "GOSUB"	 (. isSub=true;.)
	| "GO" ("TO" | "SUB"  (. isSub=true;.))
	 )
	 JumpLabel<ref label> (. node=new JumpStatementNode(label, isSub); .)
.

ReturnStatement<ref StatementNode node>
= "RETURN"	(.node= new ReturnStatementNode();.)
.

IfThenStatement<ref StatementNode node>
(.
	ExpressionNode boolExpr=null;
	string label=null;
.)
= "IF" RelationalExpression<ref boolExpr> "THEN" JumpLabel<ref label> 
(.node=new IfThenStatementNode(boolExpr,label); .)
.

ForStatement<ref StatementNode node>
(.
 ExpressionNode varExpr =null, startExpr=null, limitExpr=null, incrExpr = ConstantNode.One;
.)
=
("FOR" NumericVariable<ref varExpr>  (.prog.CheckForVarName(varExpr);.)
"=" NumericExpression<ref startExpr> "TO" NumericExpression<ref limitExpr>
["STEP" NumericExpression<ref incrExpr> ])
(.
	var fnode=new ForStatementNode(varExpr,startExpr,limitExpr, incrExpr);
	prog.PushFor(fnode);
	node=fnode;
.) .

NextStatement<ref StatementNode node>
(.
	ExpressionNode varExpr=null;
.)
= "NEXT" (NumericVariable<ref varExpr>)
(.
	 var nnode=new NextStatementNode(varExpr);
	 prog.PopNext(ref nnode);
	 node=nnode;
.)	.

DataStatement<ref StatementNode node>
(.
	node= new NopStatementNode();
	var list = new List<ConstantNode>();
.)
=
"DATA" DataList<list> 
(.
	prog.AddData(list);
.)
.

DataList<. List<ConstantNode> list .>
(.
	ConstantNode cnode =null;

.)
=
Datum<ref cnode> (. list.Add(cnode); .)  {"," Datum<ref cnode> (. list.Add(cnode); .) }
.

Datum<ref ConstantNode node>
(.
	ExpressionNode enode=null;
	string s=null, signString="";

.)
=
	StringConstant<ref enode> (.node= enode as ConstantNode; .)
 | ident (. node=new StringConstantNode(t.val); .)
 | [IF(LaIsSign) signToken (.signString=t.val; .)] 
	 NumericConstantString<ref s> (.node=  NumericConstantNode.Create(this,signString+s) ; .)
 .

 ReadStatement<ref StatementNode node>
 (.
	 var list=new List<ReferenceNode>(); 
 .)
 =
 "READ"  VariableList<list>
 (. 
	node=new ReadStatementNode(list);
 .) .
 

 VariableList<. List<ReferenceNode> list .>
 (.
	 ExpressionNode enode=null;
 .)
 =
	 Reference<ref enode> (.list.Add(enode as ReferenceNode); .) {"," Reference<ref enode> (.list.Add(enode as ReferenceNode); .)}
 .

 RestoreStatement<ref StatementNode node>
 =
 "RESTORE" (.node = new RestoreStatementNode(); .)
 .

 DimStatement<ref StatementNode node>
 (.
	 var list= new List<StatementNode>();
	 StatementNode stmt=null;
 .)
 =
 "DIM" 	DimContent<ref stmt> (.list.Add(stmt); .)	{"," DimContent<ref stmt> (.list.Add(stmt); .)}
 (.
	if (list.Count>1)
		node=new StatementSequenceNode(list);
	else
		node=list[0];
 .) .


 DimContent<ref StatementNode node>
 (.
	 ExpressionNode expr=null;
	 ExpressionNode enode=null;
	 var list=new List<ExpressionNode>();

 .)
 = Variable<ref enode> "(" NumericExpression<ref expr> (.list.Add(expr); .) {"," NumericExpression<ref expr> (.list.Add(expr); .) } ")"
	(.
	node=new DimStatementNode(enode, list);
 .) 
 .

 OptionStatement<ref StatementNode node>
 (.
	 //string optName=null;
	 string value=null;
 .)
 =
 "OPTION" "BASE" integer (.value=t.val; .)
 (.
	 if (value!="0" && value!="1")
	 SemErr("base must be 0 or 1");
	 node=new OptionStatement("base",value);
 .)
 .

 OnGotoStatement<ref StatementNode node>
 (.
	 ExpressionNode nexpr=null;
	 string label=null;
	 var list=new List<string>();
 .)
 =
 "ON" NumericExpression<ref nexpr> ("GOTO" | ("GO" "TO")) JumpLabel<ref label> (. list.Add(label);.) 
 {"," JumpLabel<ref label> (. list.Add(label);.) }

 (.
	node=new OnGotoStatementNode(nexpr,list);
 .) .


 SimpleStatement<ref StatementNode node>
 (.
 .)
 =
 ("RANDOMIZE") (.node= new SimpleStatementNode(t.val);.)
.

DefStatement<ref StatementNode node>
(.
	string name  =null;
	ExpressionNode expr=null;
	var list = new List<string>();
.)
=
"DEF" ident (.name= t.val; .)  {FormalArgumentList<list>} "=" NumericExpression<ref expr>
(. 
	node= new DefStatementNode(name,list,expr);

.)
.

FormalArgumentList<. List<string> list .>
(.
	ExpressionNode varNode=null;
.)
=
	"("
		{ 
		Variable<ref varNode> (. list.Add((varNode as ReferenceNode).Name);.)
		{
			","
			Variable<ref varNode>  (. list.Add((varNode as ReferenceNode).Name);.)
		}
		} 
	")"
.

InputStatement<ref StatementNode node>
(.
	var list=new 	 List<ReferenceNode>();
	ExpressionNode snode =null;
.)
=

"INPUT" {StringConstant<ref snode>} VariableList<. list .>
(.
	var scnode= snode as ConstantNode;
	node= new InputStatementNode(scnode?.StringValue,list);
.)
.

END RusBas.